Kmom10
-------

**Krav 1, 2, 3**

Eftersom jag är en gammal poker-räv online kände jag det naturligt att välja att göra ett pokerspel á la Texas Hold'em.
Jag tittade på specifikationen för projektet redan vid cirka kmom05 för att ha tid på mig att planera i huvudet hur jag skulle strukturera
det. Det kändes mycket att göra ett fullkomligt Texas Hold'em med många omgångar med satsningar och "A.I."-kod. Jag luskade runt på Discord och läste om Casino Hold'em som verkade lättare att åstadkomma. Jag tittade på Wikipedia om spelet och kände att det var bättre lämpat tidsmässigt att utföra. Jag valde att omkasta reglerna något eftersom jag tänkte att två spelare möts i en "heads-up" - spelare mot dator.

Jag visste att jag här kunde använda mig av de klasser jag haft i kortspelet 21 från kmom04. Således började jag med att bygga skalet för projektet genom att lägga till "controllern" och en "route" för sidan "proj". Jag la även till en ny sida i navbaren och kopierade in alla klasser från "Game" till en ny mapp "Proj" i "src"-mappen.

Nu hade jag något att börja med. Jag tänkte att det svåra med uppgiften var att få till en klass som räknar ut vad varje spelare har för värde på sin kort-hand. Vid sidan av att jag modifierade flera av de klasser jag redan hade var detta något jag började med ganska tidigt.

Klassen jag skapade(HandValue) för att kolla handens värde blev komplex med många funktioner för att kontrollera handen. Min plan var att skapa en "main"-funktion i klassen som går igenom varje möjlig hand med hjälp av klassens metoder och sedan returnerar resultatet i en array. Detta märktes av på testerna med "phpmd" och jag lät detta vara då jag känner att är nöjd med strukturen i klassen. Jag förstår att det är många if-satser i en och samma metod(findHandValue) med många rader kod, men jag känner att detta är nödvändigt för att fungera som en motor för kontroll av korthanden.

Så här i efterhand tänker jag att jag kunde gjort om varje handvärde till ett eget objekt med metoder för att kontrollera om en hand har just det vad objektet representerar. Det hade då delat upp "HandValue" och gjort den betydligt mindre, vilket hade minskat på komplexiteten. Men pågrund utav tidsbrist nöjer jag mig med denna strukturen och tar lärdom från det.

Utöver detta skapade jag en klass för "bordet" som lägger till korten till spelarens hand. Därför ärver klassen från spelarklassen. "Dealer"-klassen har som enda uppgift att dela ut kort till spelarna och skapas med kortleks-klassen i konstruktorn. Kortleks-klassen har konstanta array-variabler för kortens ranking, färg, och värden.
När kortleken skapas läggs 52 kort-objekt från kort-klassen in i en tom array med hjälp av klassens metoder. 

Själva logiken sker i klassen "CasinoHoldem" där rankingen av handen och oddsen finns. Det är även här vilken runda som bestäms, vem som vunnit, och hur mycket som delas ut till vinnaren.

För att åstadkomma en ORM-koppling med databasen kände jag att jag kunde spara detaljer om informationen om de två spelande, med namn, saldo, och länk till bild. Dessutom kom jag på senare att jag kunde lagra oddsen på varje poker-hand i databasen, för att hämta och skriva ut i en tabell jämte korten på bordet. Samma tabell som jag använde i en konstant "array" för att räkna ut hur mycket spelaren som vann skulle få i klassen "CasinoHoldem". Informationen om oddsen hämtade jag på Wikipedias sida om Casino Hold'em.

I "ProjectController" använde jag mig av routes för att stegvis gå igenom en runda av Casino Hold'em - från det att korten delas ut till det att alla korten ligger på bordet. I html-koden och vyerna använde jag mig av knappar för att styra vilka routes som aktiveras. Information om spelet sparade jag undan och hämtade i sessioner mellan routsen. När rundan är slut återgår användaren till första routen genom att trycka på "nästa runda". Det blir då som en loop som först avslutas när spelaren eller A.I-spelaren har 0 i saldo, eller om man går ur sessionen.

När det gäller en ny stil luskade jag runt på nätet efter casino sidor och hittade färger som jag tycker passar med de ofta dunkla spel-miljöerna, svart, grönt, och rött. Jag gjorde en kopia av "base-templaten" och döpte om den till projektet. Därefter kunde jag använda den för mina "casino-templates" med ändrad källa för css-koden så att de endast påverkade dem. En ny mapp för css-koden skapades därmed för det. Jag valde att ta bort footern från den nya "basen" då den tog för mycket plats och inte behövdes då jag hade spelarens användar-information där. Jag ville inte att användaren skulle ha en scrollbar ner till en footer.



**Krav 5: Inloggning**

Jag valde att placera inloggningen i poker-spelets header då det var ont om plats i den övre navbaren och jag tycker den passar bra ihop med länken till "about"-sidan. Dessutom ville jag att den skulle höra ihop med projektet som är poker-spelet. 

Här använder jag mig av Symfonys inbyggda funktionalitet för att skapa login. Jag hittade denna möjligheten genom att läsa Symfonys dokumentation och det är ett smidigt sätt att få en grundstruktur för att hantera en login. Det skapas genom att man använder kommandot "bin/console" ihop med "make:user" följt av ett argument för namnet på tabellen i databasen som skapas. Det ges flera valmöjligheter om hur man vill att login-strukturen ska se ut.

Genom kommandot skapas flera filer som ger säkerhet till en inloggning när det gäller att hasha lösenord och lägger till kod i sidans "security.yaml"-fil för detta ändamål. Dessutom skapas en "entitets"-fil för kopplingen mellan webbsidans routes och databasen. Här skapas bland annat "getters" och "setters" för akronym, lösenord och vilken roll användaren har. Rollerna hade jag stor användning av när jag sedan skapade en "admin"-användare.

För att skapa möjligheten för användaren att registrera sig finns även här kommandot "bin/console make:registration-form" som skapar en koppling till login-funktionaliteten. Filer med klasser för registrerings-formulär och en kontroller för att validera det postade formuläret skapas. Dessutom skapas en vy för registrerings-formuläret.

För att lägga till login-formulär med tillhörande funktionalitet använde jag kommandot "bin/console make:auth". En route för både att logga in och att logga ut skapades därmed. 

Jag skapade en "admin"-användare genom att göra en tillfällig route och använde Symfonys kommando för att hasha ett lösenord och sedan "sätta" det med den tillgängliga funktionen. Här satte jag rollen "ROLE_ADMIN" som blir unik. När en vanlig användare skapas läggs rollen "ROLE_USER" till automatiskt i "setter"-funktionen, vilket även admin då får. I .yaml-filen för säkerheten finns inställningar för vilka routes som ska vara tillgängliga för en viss användare. Det gör att endast inloggade användare har tillgång till dem. Smart och smidigt.

Utöver detta fick jag skapa en kontroller för användaren som sköter funktionaliteten för varje "route" som har med login, registrering, admin, och användarens profil att göra. Genom att göra en kontroll i routen för användarens profil om rollen för användaren är admin eller ej, använder jag två olika vyer för den vanliga användaren och admin. Om det är en admin "redirectas" användaren till dito route och en tabell visas över alla användare med "CRUD" inkorporerat i "UserController". Annars visas vyn för användarens profil och möjligheten att redigera den.


**Om projektet**

Jag tycker projektet var rimligt efter allt vi har gjort i tidigare kmoms. Det var ett snäpp högre i svårighetsgrad än spelet 21, som jag gillade, och gjorde att utmaningen blev något jag såg fram emot.

Det som var svårt var att komma på i vilken stor utsträckning projektet skulle vara. Räknas det om jag gör en enklare version av Texas Holdem än vad som står? Jag tänkte ofta om detta är för enkelt att utföra eller om jag behöver visa mer. Det är svårt att veta var gränsen går. Samtidigt vet jag att det utryckligen ska göras så enkelt som möjligt. Kanske var det att jag ställde för höga krav på mig själv, jag vet inte.

Det tog tid att lösa själva logiken med handreglerna och luska ut vilka klasser man skulle använda. Över lag är jag nöjd med projektet och tycker att det är på en lagom nivå, samtidigt som jag har lärt mig mycket.



**Om kursen**

Denna kursen har lärt mig mycket om objekt-orienterad kodning. Det har fått mig att framför allt tänka på hur klasserna är strukturerade och vad man lägger i klasserna.

Att få använda ramverket Symfony mixat med ett lager av ORM har lärt mig mycket om webbprogrammering. Det gav mig den nya insikten om att en rad i databasens tabeller kan omvandlas till ett objekt.

Jag har fått använda terminalen på min Mac, Atom som textredigerare, varierat med Google Chrome, mycket. Det har
gjort att jag slipat på mycket av mina föregående kunskaper. Jag tycker jag har lärt mig mycket av hur jag använder mitt tangentbord under kursen och hittat nya lösniningar.

Handledningen har jag inte mycket att klaga på. Det kändes mycket att göra i kmom02 med kortleken och som borde spridits ut mer, kanske på kmom01 som var lättare. Föreläsningarna är bra och tydliga.

För att summera tycker jag att kursen är värd 8/10 "Entitys".
