Kmom02
-------
**Förklara kort de objektorienterade konstruktionerna arv, komposition, interface och trait och hur de används i PHP.**

**Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden och dina klasser?**

**Berätta hur det kändes att modellera ett kortspel med flödesdiagram och psuedokod. Var det något som du tror stödjer dig i din problemlösning och tankearbete för att strukturera koden kring en applikation?**

**Vilken är din TIL för detta kmom?**

Ett arv innebär att en klass ärver alla medlemsvariabler och metoder från en annan klass. Förhållandet blir då förälder och barn, eller bas- och subklass. För att aktivera arvet i PHP använder man nyckelordet "extends" när man deklarerar subklassen följt av basklassens namn. En subklass som ärver från basklassen kan skriva över de ärvda metoderna eller medlemsvariablerna genom att man skriver samma namn som är deklarerad i basklassen.

Komposition i objektorienterad programmering innebär att två objekt har stark koppling till varandra. En klass objekt som består av en annan klass objekt kan inte existera ensamt om den ena försvinner. En svagare koppling kallas aggregat och då kan kopplingen brytas och de kan ändå fungera på egen hand. I PHP deklarerar man den andra klassens objekt inuti klassen och det kan göras på olika vis. Man kan till exempel anropa ett objekt i någon metods argument eller direkt in i konstruktorn. Man bör med fördel "injecta" objekt in till klassen utanför klassens "scope" genom metodernas argument för att tillföra dem. Det underlättar när man sedan ska jobba med felhanteringen.

Ett interface är ett löfte om att en klass ska innehålla metoder som deklareras i interfacet. Det gör att man får bättre översyn över klassen som implementerar interfacet. Alla objekt som använder det kan omväxlande användas på ett smidigare sätt då man vet att de har samma metoder. I PHP deklareras interfacet som en klass men med nyckelordet interface istället för klass. Metoderna i interfacet skrivs som en vanlig metod förutom att man inte anger metodens body. För att deklarera att klassen använder sig av interfacet använder man nyckelordet "implements" och interfacets namn efter deklarationen av klassen.

Ibland kan flera klasser innehålla samma metoder och medlemsvariabler. Istället för att upprepa koden i dessa klasser kan man använda ett trait. Det kan då jämföras med en modul som kan återanvändas och kopieras in i klassens body. Ändrar man något i traitet ändrar man också i samtliga klasser som implementerar traitet. Ett trait i PHP deklareras som man deklarerar en klass men istället för "class" använder man "trait".
I klassen deklarerar man att man använder ett trait genom att använda "use" och traitets namn.

Jag tycker att jag lärde mig mycket om hur det fungerar när man itererar över en array med nästlade arrayer och objekt. Jag läste på mycket om det på nätet för att kunna lösa uppgiften om korlek med spelare och antal kort per spelare. För att skriva ut innehållet i objekt och deras medlemsvariabler använder man dotnotationer i twig. Är variabeln privat letar twig upp "getmetoden" för variabeln automatiskt i klassen. Finns en till array efter ett objekt krävs nästlade foreach-loopar för att traversera djupare i iterationen. Det får vara min TIL för detta kmom. 
