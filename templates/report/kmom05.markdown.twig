Kmom05
-------
**Gick det bra att jobba igenom övningen med Symfony och Doctrine. Något särskilt du tänkte/reagerade på under övningen?**

**Berätta om din applikation och hur du tänkte när du byggde upp den. Tänkte du något speciellt på användargränssnittet? Gick det bra att jobba med ORM i CRUD eller vad anser du om det?**

**Berätta om du gjorde (delar av) extrauppgiften med användare och login.**

**Vad är din uppfattning om ORM så här långt och relatera gärna till andra sätt att jobba med applikationskod mot databaser?**

**Vilken är din TIL för detta kmom?**

Jag tänkte från början att biblioteket kunde vara strukturat med en startsida med navbar som tar användaren vidare till bibliotekets undersidor för "CRUD". Jag tyckte att jag här kunde använda navbaren jag använde för kortleken och kände att det skapade en mer enhetlig design. På startsidan valde jag att visa alla böcker i en tabell så att man kan klicka på titeln för att se detaljer om den valda boken. Jag tycker det blir bra struktur med en tabell, med borders som avgränsar varje rad.

För att skapa en ny bok till biblioteket valde jag ett formulär som jag hämtade från [w3schools.com](https://www.w3schools.com/css/css_form.asp), som jag även använde för att välja spelare och kort för kortleken. Man kommer direkt till formuläret när man klickar på "lägg till en bok". Efter att man har bekräftat den nya boken genom POST-routen för "books_create_process" kände jag att det vore bäst om användaren "redirectas" till routen för att visa alla böcker, för att få en bekräftelse på att boken är tillagd. Likadant tänkte jag för "update" och "delete", så att användaren får en översyn över sina förändringar i databasen. Vid "update" och "delete" valde jag att visa formuläret ifyllt så att man ser vad som ska redigeras. Med skillnaden att i "delete"-formuläret användes "readonly" i vyn så att användaren endast kan läsa bokens detaljer.

Jag tycker att ORM är ett smart sätt att binda samman objektorienterad php med databasen. Man får mycket hjälp på vägen och jag förstår att det är ett bra alternativ för de som inte kan sql-kodning. Interfacet i Doctrine för att skapa databas och lägga till en ny tabell är lätt att förstå i terminalen. Jag kände dock en avsaknad av information för att ändra i entitets-klassen man skapat. Jag råkade skapa en kolumn med namnet "titel" istället för "title" och ville ändra dess namn. Detta försökte jag ändra på genom att återskapa kolumnen men då fick jag error för att den redan finns. Jag läste på "stackowerflow" att man kunde ändra i entitets-klassen på namnen men valde att inte göra det då det var en så liten sak att ändra, så det fick vara. Det vore bra med mer information om det.

Jag läste genom hela introduktionen till doctrine på symfonys hemsida och tycker att övningen sammanfattade den bra. Jag använde mig mycket av övningen för att hämta informaton om hur de olika routsen för "CRUD" är uppbyggda och strukturerade. Den enda skillnaden var att jag anpassade routsen som på något sätt ändrar i databasen. I de fallen använde jag mig av "POST"-metoden för att radera, uppdatera, eller lägga till en bok. Efter att POST-formuläret är "submittad" sker en mellanlandning i en processing-route som ändrar eller lägger till i databasen. I fallen med att radera och uppdatera en bok hämtas id:et på boken genom "GET"-metoden från URL:en, som sedan används för att hämta bok-objektet från databasen. Det hämtade bok-objektet används sedan för att uppdatera raden i databasen som den representerar genom dess metoder och POST-formulärets inputs som argument, eller att radera hela objektet. Detta sker med hjälp utav Doctrines "entityManager" och dess metoder.

Min TIL för detta kmom är att jag nu fått upp ögonen för hur man på ett smidigt sätt kan skapa en koppling mellan objektorienterad programmering och en databas genom att använda ett ORM.
